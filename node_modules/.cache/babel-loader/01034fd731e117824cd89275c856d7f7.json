{"ast":null,"code":"import axios from 'axios';\nimport jwt from 'jsonwebtoken';\nimport { LOGIN_GET_REQUEST, LOGIN_GET_SUCCESS, LOGIN_GET_FAIL, SIGNUP_GET_REQUEST, SIGNUP_GET_SUCCESS, SIGNUP_GET_FAIL, OTP_GET_REQUEST, OTP_GET_SUCCESS, OTP_GET_FAIL, OTPRESEND_GET_SUCCESS, OTPRESEND_GET_REQUEST, OTPRESEND_GET_FAIL } from '../constants/loginConstants';\nexport const signIn = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    const config = {\n      header: {\n        'Content-type': 'multipart/form-data'\n      }\n    };\n    dispatch({\n      type: LOGIN_GET_REQUEST\n    });\n    const {\n      data\n    } = await axios.post('https://mentorkart.org/api/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_GET_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('user', JSON.stringify(data));\n\n    if (data) {\n      const payload = {\n        email: email,\n        password: password,\n        app_key: 'mkwebsite'\n      };\n      const secretKey = Buffer.from('website-secret', 'base64');\n      const token = jwt.sign(payload, secretKey, {\n        expiresIn: '2d'\n      });\n      localStorage.setItem('userInfo', JSON.stringify(token));\n    }\n  } catch (error) {\n    dispatch({\n      type: LOGIN_GET_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.response\n    });\n  }\n};\nexport const signUp = ({\n  username,\n  category,\n  mobile_no,\n  email,\n  password,\n  password_confirmation,\n  user_type,\n  first_name,\n  last_name,\n  country_code,\n  country_name,\n  utm_source\n}) => async dispatch => {\n  try {\n    const config = {\n      header: {\n        'Content-type': 'multipart/form-data'\n      }\n    };\n    dispatch({\n      type: SIGNUP_GET_REQUEST\n    });\n    const {\n      data\n    } = await axios.post('https://mentorkart.org/api/register', {\n      category,\n      username,\n      mobile_no,\n      email,\n      password,\n      password_confirmation,\n      user_type,\n      first_name,\n      last_name,\n      country_code,\n      country_name\n    }, config);\n    dispatch({\n      type: SIGNUP_GET_SUCCESS,\n      payload: data.data\n    });\n  } catch (error) {\n    dispatch({\n      type: SIGNUP_GET_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.response\n    });\n  }\n};\nexport const otpsection = ({\n  otp,\n  country_code,\n  country_name,\n  token,\n  email,\n  password,\n  utm_source,\n  user_category,\n  mobile_number,\n  first_name,\n  last_name\n}) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    dispatch({\n      type: OTP_GET_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(`${process.env.REACT_APP_WEBSITE_URL}/api/verify-otp`, {\n      otp,\n      country_code,\n      country_name\n    }, config);\n    console.log(data);\n    const res = await axios.post(`${process.env.REACT_APP_WEBSITE_URL}/api/store-leads`, {\n      utm_source,\n      email,\n      user_category,\n      mobile_number,\n      first_name,\n      last_name //   user_category,\n\n    }, config);\n    console.log(res);\n    dispatch({\n      type: OTP_GET_SUCCESS,\n      payload: data\n    });\n\n    if (data) {\n      const payload = {\n        email: email,\n        password: password,\n        app_key: 'mkwebsite'\n      };\n      const secretKey = Buffer.from('website-secret', 'base64');\n      const token = jwt.sign(payload, secretKey, {\n        expiresIn: '2d'\n      });\n      localStorage.setItem('userInfo', JSON.stringify(token));\n    }\n  } catch (error) {\n    dispatch({\n      type: OTP_GET_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.response\n    });\n  }\n};\nexport const resend = ({\n  country_code,\n  token\n}) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    dispatch({\n      type: OTPRESEND_GET_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(` ${process.env.REACT_APP_WEBSITE_URL}/api/resend-otp`, {\n      country_code\n    }, config);\n    console.log(data);\n    dispatch({\n      type: OTPRESEND_GET_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: OTPRESEND_GET_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.response\n    });\n  }\n};","map":{"version":3,"sources":["C:/clientpinsoutcode/client/src/redux/actions/loginActions.js"],"names":["axios","jwt","LOGIN_GET_REQUEST","LOGIN_GET_SUCCESS","LOGIN_GET_FAIL","SIGNUP_GET_REQUEST","SIGNUP_GET_SUCCESS","SIGNUP_GET_FAIL","OTP_GET_REQUEST","OTP_GET_SUCCESS","OTP_GET_FAIL","OTPRESEND_GET_SUCCESS","OTPRESEND_GET_REQUEST","OTPRESEND_GET_FAIL","signIn","email","password","dispatch","config","header","type","data","post","payload","localStorage","setItem","JSON","stringify","app_key","secretKey","Buffer","from","token","sign","expiresIn","error","response","message","signUp","username","category","mobile_no","password_confirmation","user_type","first_name","last_name","country_code","country_name","utm_source","otpsection","otp","user_category","mobile_number","headers","Authorization","process","env","REACT_APP_WEBSITE_URL","console","log","res","resend"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nimport {\r\n  LOGIN_GET_REQUEST,\r\n  LOGIN_GET_SUCCESS,\r\n  LOGIN_GET_FAIL,\r\n  SIGNUP_GET_REQUEST,\r\n  SIGNUP_GET_SUCCESS,\r\n  SIGNUP_GET_FAIL,\r\n  OTP_GET_REQUEST,\r\n  OTP_GET_SUCCESS,\r\n  OTP_GET_FAIL,\r\n  OTPRESEND_GET_SUCCESS,\r\n  OTPRESEND_GET_REQUEST,\r\n  OTPRESEND_GET_FAIL,\r\n} from '../constants/loginConstants';\r\n\r\nexport const signIn =\r\n  ({ email, password }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const config = {\r\n        header: {\r\n          'Content-type': 'multipart/form-data',\r\n        },\r\n      };\r\n\r\n      dispatch({ type: LOGIN_GET_REQUEST });\r\n      const { data } = await axios.post(\r\n        'https://mentorkart.org/api/login',\r\n\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: LOGIN_GET_SUCCESS,\r\n        payload: data,\r\n      });\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n      if (data) {\r\n        const payload = {\r\n          email: email,\r\n          password: password,\r\n          app_key: 'mkwebsite',\r\n        };\r\n\r\n        const secretKey = Buffer.from('website-secret', 'base64');\r\n\r\n        const token = jwt.sign(payload, secretKey, { expiresIn: '2d' });\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(token));\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: LOGIN_GET_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.response,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const signUp =\r\n  ({\r\n    username,\r\n    category,\r\n    mobile_no,\r\n    email,\r\n    password,\r\n    password_confirmation,\r\n    user_type,\r\n    first_name,\r\n    last_name,\r\n    country_code,\r\n    country_name,\r\n    utm_source,\r\n  }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const config = {\r\n        header: {\r\n          'Content-type': 'multipart/form-data',\r\n        },\r\n      };\r\n\r\n      dispatch({ type: SIGNUP_GET_REQUEST });\r\n      const { data } = await axios.post(\r\n        'https://mentorkart.org/api/register',\r\n        {\r\n          category,\r\n          username,\r\n          mobile_no,\r\n          email,\r\n          password,\r\n          password_confirmation,\r\n          user_type,\r\n          first_name,\r\n          last_name,\r\n          country_code,\r\n          country_name,\r\n        },\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: SIGNUP_GET_SUCCESS,\r\n        payload: data.data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: SIGNUP_GET_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.response,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const otpsection =\r\n  ({\r\n    otp,\r\n    country_code,\r\n    country_name,\r\n    token,\r\n    email,\r\n    password,\r\n    utm_source,\r\n    user_category,\r\n    mobile_number,\r\n\r\n    first_name,\r\n    last_name,\r\n  }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      };\r\n\r\n      dispatch({ type: OTP_GET_REQUEST });\r\n      const { data } = await axios.post(\r\n        `${process.env.REACT_APP_WEBSITE_URL}/api/verify-otp`,\r\n        { otp, country_code, country_name },\r\n        config\r\n      );\r\n      console.log(data);\r\n\r\n      const res = await axios.post(\r\n        `${process.env.REACT_APP_WEBSITE_URL}/api/store-leads`,\r\n        {\r\n          utm_source,\r\n          email,\r\n          user_category,\r\n          mobile_number,\r\n          first_name,\r\n          last_name,\r\n          //   user_category,\r\n        },\r\n        config\r\n      );\r\n      console.log(res);\r\n\r\n      dispatch({\r\n        type: OTP_GET_SUCCESS,\r\n        payload: data,\r\n      });\r\n      if (data) {\r\n        const payload = {\r\n          email: email,\r\n          password: password,\r\n          app_key: 'mkwebsite',\r\n        };\r\n\r\n        const secretKey = Buffer.from('website-secret', 'base64');\r\n\r\n        const token = jwt.sign(payload, secretKey, { expiresIn: '2d' });\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(token));\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: OTP_GET_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.response,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const resend =\r\n  ({ country_code, token }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      };\r\n\r\n      dispatch({ type: OTPRESEND_GET_REQUEST });\r\n      const { data } = await axios.post(\r\n        ` ${process.env.REACT_APP_WEBSITE_URL}/api/resend-otp`,\r\n        { country_code },\r\n        config\r\n      );\r\n      console.log(data);\r\n\r\n      dispatch({\r\n        type: OTPRESEND_GET_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: OTPRESEND_GET_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.response,\r\n      });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}